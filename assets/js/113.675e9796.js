(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{558:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("code",[t._v("Vuex")]),t._v(" 是一个专为 "),s("code",[t._v("Vue.js")]),t._v(" 应用程序开发的"),s("strong",[t._v("状态管理模式")]),t._v("。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 "),s("code",[t._v("Vuex")]),t._v(" 也集成到 "),s("code",[t._v("Vue")]),t._v(" 的官方调试工具 "),s("a",{attrs:{href:"https://github.com/vuejs/vue-devtools",target:"_blank",rel:"noopener noreferrer"}},[t._v("devtools extension"),s("OutboundLink")],1),t._v("，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。")]),t._v(" "),s("h2",{attrs:{id:"什么是-状态管理模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-状态管理模式"}},[t._v("#")]),t._v(" 什么是“状态管理模式”？")]),t._v(" "),s("p",[t._v("让我们从一个简单的 Vue 计数应用开始：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// state")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("data")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("count")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// view")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("template")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<div>{{ count }}</div>")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// actions")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("methods")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("increment")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("p",[t._v("这个状态自管理应用包含以下几个部分：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("state")]),t._v("，驱动应用的数据源；")]),t._v(" "),s("li",[s("strong",[t._v("view")]),t._v("，以声明方式将 "),s("strong",[t._v("state")]),t._v(" 映射到视图；")]),t._v(" "),s("li",[s("strong",[t._v("actions")]),t._v("，响应在 "),s("strong",[t._v("view")]),t._v(" 上的用户输入导致的状态变化。")])]),t._v(" "),s("p",[t._v("以下是一个表示“单向数据流”理念的简单示意：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/img/vuex/vuex1.png",alt:"image"}})]),t._v(" "),s("p",[t._v("但是，当我们的应用遇到"),s("strong",[t._v("多个组件共享状态")]),t._v("时，单向数据流的简洁性很容易被破坏：")]),t._v(" "),s("ul",[s("li",[t._v("多个视图依赖于同一状态。")]),t._v(" "),s("li",[t._v("来自不同视图的行为需要变更同一状态。")])]),t._v(" "),s("p",[t._v("对于问题一，传参的方法对于多层嵌套的组件将会非常繁琐，并且对于"),s("strong",[t._v("兄弟组件间的状态")]),t._v("传递无能为力。")]),t._v(" "),s("p",[t._v("对于问题二，我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码。")]),t._v(" "),s("p",[t._v("因此，我们为什么不把组件的共享状态抽取出来，以一个"),s("strong",[t._v("全局单例模式")]),t._v("管理呢？在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为！")]),t._v(" "),s("p",[t._v("通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护。")]),t._v(" "),s("p",[t._v("这就是 Vuex 背后的基本思想，借鉴了  "),s("code",[t._v("Flux")]),t._v(" 、 "),s("code",[t._v("Redux")]),t._v(" 和 "),s("code",[t._v("The Elm Architecture")]),t._v("。与其他模式不同的是，Vuex 是专门为 Vue.js 设计的状态管理库，以利用 Vue.js 的细粒度数据响应机制来进行高效的状态更新。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/img/vuex/vuex2.png",alt:"image"}})]),t._v(" "),s("h2",{attrs:{id:"什么情况下我应该使用-vuex"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么情况下我应该使用-vuex"}},[t._v("#")]),t._v(" 什么情况下我应该使用 Vuex？")]),t._v(" "),s("p",[t._v("如果需要构建一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。引用 "),s("code",[t._v("Redux")]),t._v(" 的作者 "),s("code",[t._v("Dan Abramov")]),t._v(" 的话说就是：")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[t._v("Flux 架构就像眼镜：您自会知道什么时候需要它。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);